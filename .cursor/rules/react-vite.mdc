---
description: rules for react-vite
globs: 
---
This is react based web application.

The application is a web based application that is used to manage a restaurant.
The application is built using react, vite, tailwind, shadcn, sonner, lucid icon, Tanstack Router, Tanstack/react-query, zod, Axios, Typescript and Redux Toolkit.

When suggesting code, please use the following libraries:
- Tanstack Router for navigation
- Redux Toolkit for state management
- Shadcn for UI components
- Sonner for notifications
- Lucid icon for icons
- Vite for build tool
- Tailwind for styling

Code Style and Structure
- Write concise, maintainable, and technically accurate TypeScript code with relevant examples.
- Use functional and declarative programming patterns; avoid classes.
- Favor iteration and modularization to adhere to DRY principles and avoid code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Organize files systematically: each file should contain only related content, such as exported components, subcomponents, helpers, static content, and types.

File structure:
- src/components: Reusable UI components
- src/pages: Top-level page components
- src/utils: Helper functions and utilities
- src/api: API service functions

TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types for their extendability and ability to merge.
- Avoid enums; use maps instead for better type safety and flexibility.
- Use functional components with TypeScript interfaces.

Naming Conventions
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for functions.

Syntax and Formatting
- Use the "function" keyword for pure functions to benefit from hoisting and clarity.
- Always use the Vue Composition API script setup style.

UI and Styling
- Use shadcn, and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.

Performance guidelines:
- Use React.memo for pure functional components
- Optimize useEffect dependencies to prevent unnecessary re-renders
- Leverage VueUse functions where applicable to enhance reactivity and performance.
- Wrap asynchronous components in Suspense with a fallback UI.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.
- Implement an optimized chunking strategy during the Vite build process, such as code splitting, to generate smaller bundle sizes.

Testing requirements:
- Write unit tests using Jest and React Testing Library
- Aim for at least 80% test coverage
- Include snapshot tests for UI components

Error handling:
- Use try/catch blocks for async operations
- Implement a global error boundary component

Code readability:
- Use meaningful variable and function names
- Add comments to explain why behind the code in more complex functions
- Keep functions small and focused (single responsibility)

Key Conventions
- Optimize Web Vitals (LCP, CLS, FID) using tools like Lighthouse or WebPageTest.
- Use the VueUse library for performance-enhancing functions.
- Implement lazy loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.
- Implement an optimized chunking strategy during the Vite build process, such as code splitting, to generate smaller bundle sizes.

Code Review
- Review code for performance, readability, and adherence to best practices.
- Ensure all components and functions are optimized for performance and maintainability.
- Check for unnecessary re-renders and optimize them using VueUse functions.
- Use the VueUse library for performance-enhancing functions.
- Implement lazy loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.
- Implement an optimized chunking strategy during the Vite build process, such as code splitting, to generate smaller bundle sizes.

Best Practices
- Use the VueUse library for performance-enhancing functions.
- Implement lazy loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.
- Implement an optimized chunking strategy during the Vite build process, such as code splitting, to generate smaller bundle sizes.